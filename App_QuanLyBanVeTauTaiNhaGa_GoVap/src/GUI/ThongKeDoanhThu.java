/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DAO.Dao_ThongKeDoanhThu;
import Database.ConnectDatabase;
import Entity.ModelData;
import java.awt.Color;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import thongKeDoanhThu.ModelPieChart;
import thongKeDoanhThu.PieChart;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import thongKeDoanhThu.ModelChart;
import thongKeDoanhThu.ModelPieChart;
import thongKeDoanhThu.PieChart;
/**
 *
 * @author ASUS
 */
public class ThongKeDoanhThu extends javax.swing.JFrame {
    JPanel panel = new JPanel();
    /**
     * Creates new form ThongKeDoanhThu
     */
    public ThongKeDoanhThu() {
         ConnectDatabase.getInstance().connect();
        initComponents();
         chartSong.addLegend("Doanh Thu", Color.decode("#7b4397"), Color.decode("#dc2430"));
        piechart.setChartType(PieChart.PeiChartType.DONUT_CHART);
        panel=jPanel1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooserNgayBatDau = new com.toedter.calendar.JDateChooser();
        jDateChooserNgayKetThuc = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        btnThongKe = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Panel_Chart_Song = new javax.swing.JPanel();
        chartSong = new thongKeDoanhThu.CurveLineChart();
        Panel_Chart_Pie = new javax.swing.JPanel();
        piechart = new thongKeDoanhThu.PieChart();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        DoanhThu = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tongVe = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tongHoaDon = new javax.swing.JLabel();
        soTau = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(0, 130, 67));

        jLabel1.setBackground(new java.awt.Color(0, 102, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Thống Kê Doanh Thu");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lọc", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Bắt đầu");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Kết thúc");

        jDateChooserNgayBatDau.setDate(new java.util.Date(1702389189000L));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Loại Thời Gian");

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo Thứ Trong Tuần", "Theo Tháng", "Theo Năm", "Theo Giờ" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("Tiêu chí");

        jComboBox2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo Tuyến", "Theo Tàu" }));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        btnThongKe.setBackground(new java.awt.Color(0, 255, 255));
        btnThongKe.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnThongKe.setText("Thống kê");
        btnThongKe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThongKeActionPerformed(evt);
            }
        });

        jButton1.setText("Tạo Báo Cáo");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserNgayBatDau, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jDateChooserNgayKetThuc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel4))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, 1, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, 179, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32)
                .addComponent(btnThongKe, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooserNgayBatDau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jDateChooserNgayKetThuc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnThongKe, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        Panel_Chart_Song.setBackground(new java.awt.Color(255, 255, 255));
        Panel_Chart_Song.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        Panel_Chart_Song.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout Panel_Chart_SongLayout = new javax.swing.GroupLayout(Panel_Chart_Song);
        Panel_Chart_Song.setLayout(Panel_Chart_SongLayout);
        Panel_Chart_SongLayout.setHorizontalGroup(
            Panel_Chart_SongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chartSong, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
        );
        Panel_Chart_SongLayout.setVerticalGroup(
            Panel_Chart_SongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chartSong, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Biểu đồ sóng", Panel_Chart_Song);

        javax.swing.GroupLayout Panel_Chart_PieLayout = new javax.swing.GroupLayout(Panel_Chart_Pie);
        Panel_Chart_Pie.setLayout(Panel_Chart_PieLayout);
        Panel_Chart_PieLayout.setHorizontalGroup(
            Panel_Chart_PieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_Chart_PieLayout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(piechart, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addGap(182, 182, 182))
        );
        Panel_Chart_PieLayout.setVerticalGroup(
            Panel_Chart_PieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_Chart_PieLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(piechart, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Biểu đồ tròn", Panel_Chart_Pie);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Tổng Doanh thu");

        DoanhThu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        DoanhThu.setForeground(new java.awt.Color(255, 0, 0));
        DoanhThu.setText("0");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Tổng vé đã bán");

        tongVe.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tongVe.setText("0");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Số hóa đơn");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("Số tàu đã chạy");

        tongHoaDon.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tongHoaDon.setText("0");

        soTau.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        soTau.setText("0");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addComponent(DoanhThu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(tongVe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(65, 65, 65))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                        .addGap(58, 58, 58)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addGap(20, 20, 20))
                    .addComponent(tongHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 9, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addComponent(soTau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DoanhThu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tongVe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tongHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(soTau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addComponent(jTabbedPane1)
                    .addGap(3, 3, 3)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 317, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        table.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Thời Gian", "Số hóa đơn", "Giá trị Hóa Đơn", "Giảm giá", "Doanh Thu", "Số vé Đã bán", "Số Tàu Chạy"
            }
        ));
        table.setRowHeight(40);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
       
    }                                          

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void btnThongKeActionPerformed(java.awt.event.ActionEvent evt) {                                           
         Dao_ThongKeDoanhThu dao = new Dao_ThongKeDoanhThu();
         String tuNgay=null;
         String denNgay=null;
         List<Object[]> thongKeList=null;


        Date selectedDate = jDateChooserNgayBatDau.getDate();


// Kiểm tra xem người dùng có chọn ngày bắt đầu hay không
        if (selectedDate != null) {
            // Định dạng ngày theo kiểu yyyy-MM-dd
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            tuNgay = sdf.format(selectedDate);
            // Hiển thị thông báo ngày bắt đầu đã chọn

        } else {
            // Thông báo nếu chưa chọn ngày bắt đầu
            JOptionPane.showMessageDialog(null, "Chưa chọn ngày bắt đầu.");
        }

        Date selectedDate2 = jDateChooserNgayKetThuc.getDate();


// Kiểm tra xem người dùng có chọn ngày kết thúc hay không
        if (selectedDate2 != null) {
            // Định dạng ngày theo kiểu yyyy-MM-dd
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            denNgay = sdf.format(selectedDate2);
            // Hiển thị thông báo ngày kết thúc đã chọn

        } else {
            // Thông báo nếu chưa chọn ngày kết thúc
            JOptionPane.showMessageDialog(null, "Chưa chọn ngày kết thúc.");
        }

// Kiểm tra ngày bắt đầu không được sau ngày kết thúc
        if (tuNgay != null && denNgay != null) {
            try {
                // Chuyển đổi ngày từ chuỗi sang đối tượng Date để so sánh
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Date dateTuNgay = sdf.parse(tuNgay);
                Date dateDenNgay = sdf.parse(denNgay);

                if (dateTuNgay.after(dateDenNgay)) {
                    // Thông báo nếu ngày bắt đầu sau ngày kết thúc
                    JOptionPane.showMessageDialog(null, "Ngày bắt đầu không thể sau ngày kết thúc.");
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
        if (jRadioButton1.isSelected()) {
            // Lấy giá trị được chọn trong combobox
            String selectedOption = jComboBox1.getSelectedItem().toString();
            
            // Kiểm tra giá trị của combobox
            if ("Theo Thứ Trong Tuần".equals(selectedOption)) {
            chartSong.clear();
            piechart.clearData();
            // Giả sử tongTienTheoThu là một Map có dữ liệu (được lấy từ dao.getTongTienTheoThu())
            Map<String, Double> tongTienTheoThu = dao.getTongTienTheoThu(tuNgay, denNgay);

            // Tạo một danh sách chứa các Map.Entry
            List<ModelData> lists = new ArrayList<>();

            // Thêm từng entry vào danh sách
            for (Map.Entry<String, Double> entry : tongTienTheoThu.entrySet()) {
                String thu = entry.getKey();
                double tongTien = entry.getValue();
                lists.add(new ModelData(thu, tongTien, 0, 0));
            }

            // Sắp xếp theo thứ tự trong tuần (ví dụ: 1 = Thứ Hai, 7 = Chủ Nhật)
            lists.sort(Comparator.comparingInt(d -> getSoThuFromThu(d.getMonth())));
            int index=0;
            // Thêm dữ liệu vào chartSong sau khi đã sắp xếp
            for (ModelData d : lists) {
                chartSong.addData(new ModelChart(d.getMonth(), new double[]{d.getAmount(), d.getCost(), d.getProfit()}));
                piechart.addData(new ModelPieChart(d.getMonth(),d.getAmount(), getColor(index++)));
            }
             chartSong.start();

             thongKeList = dao.thongKeHoaDonTheoThuTrongTuan(tuNgay, denNgay);
             DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);
                
                  table.setAutoCreateRowSorter(true);
                // Điền dữ liệu vào bảng
                int stt = 1;
                for (Object[] thongKe : thongKeList) {
                String thuTrongTuan = "";
                int thu = (int) thongKe[0]; // Lấy giá trị từ thongKe[0]

                // Kiểm tra và gán giá trị tên ngày trong tuần tương ứng
                switch (thu) {
                    case 1:
                        thuTrongTuan = "CN"; // Chủ Nhật
                        break;
                    case 2:
                        thuTrongTuan = "T2"; // Thứ 2
                        break;
                    case 3:
                        thuTrongTuan = "T3"; // Thứ 3
                        break;
                    case 4:
                        thuTrongTuan = "T4"; // Thứ 4
                        break;
                    case 5:
                        thuTrongTuan = "T5"; // Thứ 5
                        break;
                    case 6:
                        thuTrongTuan = "T6"; // Thứ 6
                        break;
                    case 7:
                        thuTrongTuan = "T7"; // Thứ 7
                        break;
                    default:
                        thuTrongTuan = "Không xác định"; // Trường hợp không hợp lệ
                        break;
                }

                model.addRow(new Object[]{
                    stt++, 
                    thuTrongTuan, // Số thứ tự là ngày trong tuần
                    thongKe[1], // Tháng/Năm
                    thongKe[2], // Số hóa đơn
                    thongKe[4], // Giá trị hóa đơn
                    thongKe[3], // Doanh thu
                    thongKe[5], // Số vé đã bán
                    thongKe[6], // Số lịch trình
                });
            }
// Hàm để lấy số thứ tự của ngày trong tuần từ tên ngày

                 
                
                     
            } else if("Theo Tháng".equals(selectedOption)){
                chartSong.clear();
                piechart.clearData();
                // Giả sử tongTienTheoThang là một Map có dữ liệu (được lấy từ dao.getTongTienTheoThang())
                Map<String, Double> tongTienTheoThang = dao.getTongTienTheoThang(tuNgay, denNgay);

                // Tạo một danh sách chứa các Map.Entry
                List<ModelData> lists = new ArrayList<>();

                // Thêm từng entry vào danh sách
                for (Map.Entry<String, Double> entry : tongTienTheoThang.entrySet()) {
                    String month = entry.getKey();  // Đây chỉ là tháng, không có năm
                    double amount = entry.getValue();
                    lists.add(new ModelData(month, amount, 0, 0));
                }
                 int index=0;
                // Không cần lật ngược danh sách nữa
                for (ModelData d : lists) {
                    chartSong.addData(new ModelChart(d.getMonth(), new double[]{d.getAmount(), d.getCost(), d.getProfit()}));
                   
                    piechart.addData(new ModelPieChart(d.getMonth(),d.getAmount(), getColor(index++)));
                }

                chartSong.start();
                
                thongKeList = dao.thongKeHoaDonTheoThang(tuNgay, denNgay);
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);
                
                  table.setAutoCreateRowSorter(true);
                // Điền dữ liệu vào bảng
                int stt = 1;
                for (Object[] thongKe : thongKeList) {
                    model.addRow(new Object[]{
                        stt++, // Số thứ tự
                        thongKe[1] + "/" + thongKe[0], // Tháng/Năm
                        thongKe[2], // Số hóa đơn
                        thongKe[3], // Giá trị hóa đơn
                        thongKe[5], // Doanh thu
                        thongKe[4], // Số vé đã bán
                        thongKe[6],  // Số lịch trình
                        thongKe[7]
                    });
                }
                
            }
        else if ("Theo Năm".equals(selectedOption)) {
              chartSong.clear();
              piechart.clearData();
                // Giả sử tongTienTheoThang là một Map có dữ liệu (được lấy từ dao.getTongTienTheoThang())
                Map<String, Double> tongTienTheoNam = dao.getTongTienTheoNam(tuNgay, denNgay);

                // Tạo một danh sách chứa các Map.Entry
                List<ModelData> lists = new ArrayList<>();

                // Thêm từng entry vào danh sách
                for (Map.Entry<String, Double> entry : tongTienTheoNam.entrySet()) {
                    String month = entry.getKey();  // Đây chỉ là tháng, không có năm
                    double amount = entry.getValue();
                    lists.add(new ModelData(month, amount, 0, 0));
                }
                    int index =0;
                // Không cần lật ngược danh sách nữa
                for (ModelData d : lists) {
                    chartSong.addData(new ModelChart(d.getMonth(), new double[]{d.getAmount(), d.getCost(), d.getProfit()}));
                      piechart.addData(new ModelPieChart(d.getMonth(),d.getAmount(), getColor(index++)));
                }

                chartSong.start();
                thongKeList = dao.thongKeHoaDonTheoNam(tuNgay, denNgay);
             DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);
                
                  table.setAutoCreateRowSorter(true);
                // Điền dữ liệu vào bảng
                int stt = 1;
                for (Object[] thongKe : thongKeList) {
                    model.addRow(new Object[]{
                        stt++,
                        thongKe[0],// Số thứ tự
                        thongKe[1] ,  // Tháng/Năm
                        thongKe[2], // Số hóa đơn
                        thongKe[4], // Giá trị hóa đơn
                        thongKe[3], // Doanh thu
                        thongKe[5], // Số vé đã bán
                        thongKe[6],  // Số lịch trình
                        
                    });
                }
        }else if ("Theo Giờ".equals(selectedOption)) {
            chartSong.clear();
            piechart.clearData();
            // Giả sử tongTienTheoGio là một Map có dữ liệu (được lấy từ dao.getTongTienTheoGio())
            Map<String, Double> tongTienTheoGio = dao.getTongTienTheoGio(tuNgay, denNgay);
            List<ModelData> lists = new ArrayList<>();

            for (Map.Entry<String, Double> entry : tongTienTheoGio.entrySet()) {
                String hour = entry.getKey(); // Giờ
                double amount = entry.getValue(); // Tổng tiền
                lists.add(new ModelData(hour, amount, 0, 0));
            }
            int index=0;
            for (ModelData d : lists) {
               
                chartSong.addData(new ModelChart(d.getMonth(), new double[]{d.getAmount(), d.getCost(), d.getProfit()}));
                  piechart.addData(new ModelPieChart(d.getMonth(),d.getAmount(), getColor(index++)));
            }

            chartSong.start();
              thongKeList = dao.thongKeHoaDonTheoGio(tuNgay, denNgay);
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);
                
                  table.setAutoCreateRowSorter(true);
                // Điền dữ liệu vào bảng
                int stt = 1;
                for (Object[] thongKe : thongKeList) {
                    model.addRow(new Object[]{
                        stt++, 
                         thongKe[0],// Số thứ tự
                        thongKe[1] , // Tháng/Năm
                        thongKe[2], // Số hóa đơn
                        thongKe[4], // Giá trị hóa đơn
                        thongKe[3], // Doanh thu
                        thongKe[5], // Số vé đã bán
                        thongKe[6],  // Số lịch trình
               
                    });
                }
        }
            
        }else if(jRadioButton2.isSelected()) {
            String selectedOption1 = jComboBox2.getSelectedItem().toString();
            if("Theo Tuyến".equals(selectedOption1)){
                piechart.clearData();
                chartSong.clear();
                // Giả sử tongTienTheoGio là một Map có dữ liệu (được lấy từ dao.getTongTienTheoGio())
                Map<String, Double> tongTienTheoGio = dao.getDoanhThuTheoTuyen(tuNgay, denNgay);
                List<ModelData> lists = new ArrayList<>();

                for (Map.Entry<String, Double> entry : tongTienTheoGio.entrySet()) {
                    String hour = entry.getKey(); // Giờ
                    double amount = entry.getValue(); // Tổng tiền
                    lists.add(new ModelData(hour, amount, 0, 0));
                }
                int index=0;
                for (ModelData d : lists) {
                      piechart.addData(new ModelPieChart(d.getMonth(),d.getAmount(), getColor(index++)));
                    chartSong.addData(new ModelChart(d.getMonth(), new double[]{d.getAmount(), d.getCost(), d.getProfit()}));
                }

                chartSong.start();
                thongKeList = dao.thongKeDoanhThuTheoTuyen(tuNgay, denNgay);
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);
                
                  table.setAutoCreateRowSorter(true);
                // Điền dữ liệu vào bảng
                int stt = 1;
                for (Object[] thongKe : thongKeList) {
                    model.addRow(new Object[]{
                        stt++, 
                         // Số thứ tự
                        thongKe[1] , // Tháng/Năm
                       "", // Số hóa đơn
                        thongKe[2],
                        "","",// Giá trị hóa đơn
                        thongKe[4], // Doanh thu
                        thongKe[3], // Số vé đã bán
                        
               
                    });
                }
            }
            
        }
        double dt=dao.getDoanhThuTrongKhoangThoiGian(tuNgay, denNgay);
        int tv=dao.countSoVeDaBanTrongThoiGian(tuNgay, denNgay);
        int tau=dao.countLichTrinhTrongKhoangThoiGian(tuNgay, denNgay);
        int hd=dao.countHoaDonInRange(tuNgay, denNgay);
        DecimalFormat df = new DecimalFormat("#,###.00VND");
        String formattedDt = df.format(dt);
        DoanhThu.setText(formattedDt);
       tongVe.setText(String.valueOf(tv));
        tongHoaDon.setText(String.valueOf(hd));
         soTau.setText(String.valueOf(tau));
         System.out.println(tau);
         DefaultTableCellRenderer moneyRenderer = new DefaultTableCellRenderer() {
                private final NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
                
                @Override
                public void setValue(Object value) {
                    if (value instanceof Number) {
                        setText(currencyFormat.format(value));
                    } else {
                        super.setValue(value);
                    }
                }
                
            };
           table.getColumnModel().getColumn(3).setCellRenderer(moneyRenderer); // Cột "Giá trị hóa đơn"
        table.getColumnModel().getColumn(4).setCellRenderer(moneyRenderer); // Cột "Doanh thu"
          table.getColumnModel().getColumn(5).setCellRenderer(moneyRenderer);
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeDoanhThu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeDoanhThu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeDoanhThu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeDoanhThu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThongKeDoanhThu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel DoanhThu;
    private javax.swing.JPanel Panel_Chart_Pie;
    private javax.swing.JPanel Panel_Chart_Song;
    private javax.swing.JButton btnThongKe;
    private javax.swing.ButtonGroup buttonGroup1;
    private thongKeDoanhThu.CurveLineChart chartSong;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooserNgayBatDau;
    private com.toedter.calendar.JDateChooser jDateChooserNgayKetThuc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private thongKeDoanhThu.PieChart piechart;
    private javax.swing.JLabel soTau;
    private javax.swing.JTable table;
    private javax.swing.JLabel tongHoaDon;
    private javax.swing.JLabel tongVe;
    // End of variables declaration                   
private int getSoThuFromThu(String thu) {
    switch (thu) {
        case "Monday": return 1;
        case "Tuesday": return 2;
        case "Wednesday": return 3;
        case "Thursday": return 4;
        case "Friday": return 5;
        case "Saturday": return 6;
        case "Sunday": return 7;
        default: return -1;
    }
}
private Color getColor(int index){
    Color[] color=new Color[]{new Color(23, 126, 238),new Color(255, 0, 204),new Color(255, 51, 0),new Color(255, 102, 0),new Color(255, 204, 51),new Color(153, 255, 0),new Color(51, 255, 0),new Color(0, 255, 204),new Color(204, 255, 204),new Color(255, 204, 255),new Color(204, 204, 255),new Color(153, 153, 153),new Color(153, 0, 51),new Color(0, 51, 51)};
    return color[index];
}
public JPanel getPanelThongKe(){
        return panel;
    }

}
