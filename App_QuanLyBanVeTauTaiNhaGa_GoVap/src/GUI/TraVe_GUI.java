/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Entity.*;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.sql.Timestamp;
import java.util.List;
import DAO.DAO_TraVe;
import Database.ConnectDatabase;
import com.itextpdf.io.exceptions.IOException;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import static GUI.InHoaDonTra.generateInvoicePdf;

/**
 *
 * @author ASUS
 */
public class TraVe_GUI extends JFrame {
    private NhanVien nhanvien;
    private JPanel traVePanel;
    public void setNhanViet(NhanVien nv){
        this.nhanvien = nv;
    }
    public NhanVien getNhanVien() {
        return nhanvien;
    }
    /**
     * Creates new form TraVe_GUI
     */
    public TraVe_GUI( NhanVien nv) {
         ConnectDatabase.getInstance().connect();
        initComponents();
        setNhanViet(nv) ;
        traVePanel = jPanelTraVe;
        System.out.println(nhanvien.getMaNhanVien());
        System.out.println(nv.getMaNhanVien());
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        XacNhan = new JDialog();
        jPanel1 = new JPanel();
        jPanel3 = new JPanel();
        jLabel4 = new JLabel();
        jPanel4 = new JPanel();
        jScrollPane1 = new JScrollPane();
        tblXacNhan = new JTable();
        jPanel5 = new JPanel();
        jButton3 = new JButton();
        jButton1 = new JButton();
        jCheckBox1 = new JCheckBox();
        jPanel6 = new JPanel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        lblTongPhi = new JLabel();
        lblTongVe1 = new JLabel();
        lblTongTien = new JLabel();
        lblTongTra = new JLabel();
        jPanelTraVe = new JPanel();
        jPanelChucNang = new JPanel();
        lblTraVe = new JLabel();
        jPanelTimKiem = new JPanel();
        txtMaVe = new JTextField();
        btnTimMaVe = new JButton();
        jButton2 = new JButton();
        jPanelTimTheoHoaDon = new JPanel();
        txtSDT = new JTextField();
        txtCCCD = new JTextField();
        txtMaHD = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        btnTimHoaDon = new JButton();
        jLabel3 = new JLabel();
        jPanel2 = new JPanel();
        jScrollPane2 = new JScrollPane();
        tableHienThi = new JTable();
        btnReset = new JButton();
        jPanel10 = new JPanel();
        jLabel17 = new JLabel();
        txtTongVe = new JTextField();
        jLabel18 = new JLabel();
        txtTienPhi = new JTextField();
        jLabel20 = new JLabel();
        txtTienVe = new JTextField();
        jLabel19 = new JLabel();
        txtTienTra = new JTextField();
        btnTraVe = new JButton();

        XacNhan.setLocation(new Point(350, 150));
        XacNhan.setSize(new Dimension(800, 600));
        XacNhan.addContainerListener(new ContainerAdapter() {
            public void componentAdded(ContainerEvent evt) {
                XacNhanComponentAdded(evt);
            }
        });
        XacNhan.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent evt) {
                XacNhanComponentHidden(evt);
            }
        });

        jLabel4.setFont(new Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setForeground(new Color(255, 153, 51));
        jLabel4.setText("Danh sách chọn trả");

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 239, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(407, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4, GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
        );

        tblXacNhan.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        tblXacNhan.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Thông tin", "Tiền"
            }
        ));
        tblXacNhan.setEnabled(false);
        tblXacNhan.setFocusable(false);
        tblXacNhan.setRowHeight(100);
        jScrollPane1.setViewportView(tblXacNhan);

        jButton3.setBackground(new Color(255, 51, 51));
        jButton3.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jButton3.setForeground(new Color(255, 255, 255));
        jButton3.setText("Xác Nhận");
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new Color(0, 0, 255));
        jButton1.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setForeground(new Color(255, 255, 255));
        jButton1.setText("Quay lại");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jCheckBox1.setText("In Hóa Đơn ");

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jCheckBox1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 123, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel5.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Tổng vé: ");

        jLabel6.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Tổng lệ phí");

        jLabel7.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Tổng Tiền Vé");

        jLabel8.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Tổng Tiền Trả");

        lblTongPhi.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        lblTongVe1.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        lblTongTien.setFont(new Font("Segoe UI", 0, 18)); // NOI18N

        lblTongTra.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        lblTongTra.setForeground(new Color(255, 0, 51));

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblTongVe1, GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(lblTongPhi, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel7, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblTongTra, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTongTien, GroupLayout.PREFERRED_SIZE, 145, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTongVe1, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                    .addComponent(jLabel8, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(lblTongPhi, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTongTra, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblTongTien, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(17, 17, 17))
        );

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel5, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout XacNhanLayout = new GroupLayout(XacNhan.getContentPane());
        XacNhan.getContentPane().setLayout(XacNhanLayout);
        XacNhanLayout.setHorizontalGroup(
            XacNhanLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(XacNhanLayout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        XacNhanLayout.setVerticalGroup(
            XacNhanLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(XacNhanLayout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        lblTraVe.setFont(new Font("Segoe UI", 0, 36)); // NOI18N
        lblTraVe.setText("Trả Vé");

        btnTimMaVe.setText("Tìm Theo Mã Vé");
        btnTimMaVe.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTimMaVeActionPerformed(evt);
            }
        });

        jButton2.setText("QR");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtSDT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });

        jLabel1.setText("Số điện thoại");

        jLabel2.setText("Số Giấy Tờ");

        btnTimHoaDon.setText("Tìm Theo Hóa Đơn");
        btnTimHoaDon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTimHoaDonActionPerformed(evt);
            }
        });

        jLabel3.setText("Mã Hóa Đơn");

        tableHienThi.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        tableHienThi.setForeground(new Color(51, 51, 51));
        tableHienThi.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Thông tin KH", "Thông tin  Vé", "Thành Tiền", "Phí Trả Vé", "Thông tin vé trả", "Chọn trả vé"
            }
        ));
        tableHienThi.setRowHeight(140);
        jScrollPane2.setViewportView(tableHienThi);
        if (tableHienThi.getColumnModel().getColumnCount() > 0) {
            tableHienThi.getColumnModel().getColumn(0).setResizable(false);
            tableHienThi.getColumnModel().getColumn(0).setPreferredWidth(1);
            tableHienThi.getColumnModel().getColumn(1).setMinWidth(200);
            tableHienThi.getColumnModel().getColumn(2).setMinWidth(200);
            tableHienThi.getColumnModel().getColumn(3).setPreferredWidth(50);
            tableHienThi.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        btnReset.setText("Làm mới");
        btnReset.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnReset)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReset)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout jPanelTimTheoHoaDonLayout = new GroupLayout(jPanelTimTheoHoaDon);
        jPanelTimTheoHoaDon.setLayout(jPanelTimTheoHoaDonLayout);
        jPanelTimTheoHoaDonLayout.setHorizontalGroup(
            jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelTimTheoHoaDonLayout.createSequentialGroup()
                .addGroup(jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(jLabel3, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(txtSDT)
                    .addComponent(txtCCCD)
                    .addComponent(txtMaHD))
                .addGap(18, 18, 18)
                .addComponent(btnTimHoaDon, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelTimTheoHoaDonLayout.setVerticalGroup(
            jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimTheoHoaDonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelTimTheoHoaDonLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(txtMaHD)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelTimTheoHoaDonLayout.createSequentialGroup()
                        .addGroup(jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSDT, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimHoaDon, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTimTheoHoaDonLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCCCD, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        GroupLayout jPanelTimKiemLayout = new GroupLayout(jPanelTimKiem);
        jPanelTimKiem.setLayout(jPanelTimKiemLayout);
        jPanelTimKiemLayout.setHorizontalGroup(
            jPanelTimKiemLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimKiemLayout.createSequentialGroup()
                .addGroup(jPanelTimKiemLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTimKiemLayout.createSequentialGroup()
                        .addComponent(txtMaVe)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTimMaVe)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelTimTheoHoaDon, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelTimKiemLayout.setVerticalGroup(
            jPanelTimKiemLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimKiemLayout.createSequentialGroup()
                .addGroup(jPanelTimKiemLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaVe, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimMaVe, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTimTheoHoaDon, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jLabel17.setText("Tổng số Vé");

        txtTongVe.setEditable(false);
        txtTongVe.setText("0");
        txtTongVe.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTongVeActionPerformed(evt);
            }
        });

        jLabel18.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText("Tổng Phí");

        txtTienPhi.setEditable(false);
        txtTienPhi.setText("0");

        jLabel20.setText("Tổng Tiền Vé");

        txtTienVe.setEditable(false);
        txtTienVe.setText("0");
        txtTienVe.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTienVeActionPerformed(evt);
            }
        });

        GroupLayout jPanel10Layout = new GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel20, GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(jLabel17, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(txtTongVe)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTienPhi)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(txtTienVe)
                        .addContainerGap())))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTongVe, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTienPhi, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTienVe, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel19.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        jLabel19.setForeground(new Color(255, 0, 0));
        jLabel19.setText("Tổng Tiền Hoàn");

        txtTienTra.setEditable(false);
        txtTienTra.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        txtTienTra.setForeground(new Color(255, 0, 51));
        txtTienTra.setText("0 ₫");
        txtTienTra.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTienTraActionPerformed(evt);
            }
        });

        btnTraVe.setFont(new Font("Segoe UI", 0, 24)); // NOI18N
        btnTraVe.setText("Trả Vé");
        btnTraVe.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTraVeActionPerformed(evt);
            }
        });

        GroupLayout jPanelChucNangLayout = new GroupLayout(jPanelChucNang);
        jPanelChucNang.setLayout(jPanelChucNangLayout);
        jPanelChucNangLayout.setHorizontalGroup(
            jPanelChucNangLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTimKiem, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelChucNangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelChucNangLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblTraVe, GroupLayout.PREFERRED_SIZE, 156, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelChucNangLayout.createSequentialGroup()
                        .addComponent(jLabel19, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTienTra)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTraVe, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelChucNangLayout.setVerticalGroup(
            jPanelChucNangLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelChucNangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTraVe, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTimKiem, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelChucNangLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelChucNangLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel19, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTienTra, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnTraVe, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        GroupLayout jPanelTraVeLayout = new GroupLayout(jPanelTraVe);
        jPanelTraVe.setLayout(jPanelTraVeLayout);
        jPanelTraVeLayout.setHorizontalGroup(
            jPanelTraVeLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelTraVeLayout.setVerticalGroup(
            jPanelTraVeLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTraVeLayout.createSequentialGroup()
                .addComponent(jPanelChucNang, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelTraVe, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTraVe, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void jButton2ActionPerformed(ActionEvent evt) {

            // Khởi tạo cửa sổ quét mã QR
            QR_Scan qrScan = new QR_Scan();

            // Thêm WindowListener để nhận kết quả từ QR_Scan khi đóng
            qrScan.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    // Lấy chuỗi kết quả từ mã QR và hiển thị trong txtHoTen
                    String qrResult = qrScan.getQrResult(); // Phương thức này cần được thêm trong lớp QR_Scan
                    if (qrResult != null && !qrResult.isEmpty()) {
                        txtMaVe.setText(qrResult); // Gán kết quả vào JTextField
                        btnTimMaVe.doClick(); // Tự động nhấn nút "Tìm Theo Mã Vé"
                    }
                }
            });
            qrScan.setVisible(true); // Hiển thị cửa sổ QR_Scan


    }                                        

    private void btnTimHoaDonActionPerformed(ActionEvent evt) {
        btnReset.doClick();
        String sdt = txtSDT.getText().trim();
        String maHD = txtMaHD.getText().trim();
        String cccd = txtCCCD.getText().trim();
        DAO_TraVe dao = new DAO_TraVe();
        if (maHD.isEmpty() || cccd.isEmpty() || sdt.isEmpty()) {
                     JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin: Mã HD, CCCD, SĐT.", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    return;
           }

        
        List<VeTau> veTauList = dao.getVeTauByMaHDAndCCCDAndSDT(maHD, cccd, sdt);
         DefaultTableModel model = (DefaultTableModel) tableHienThi.getModel();
         model.setRowCount(0);
         
         
         if (veTauList.isEmpty()) {
             JOptionPane.showMessageDialog(this, "Không tìm thấy dữ liệu!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
         for (VeTau veTau : veTauList) {
           VeTau ve = dao.getVeByMaVe(veTau.getMaVe());
            KhachHang kh = dao.getTenVaCCCDKhachHangByMaVe(veTau.getMaVe());
            LocalDate ngayKhoiHanh = ve.getLichTrinhTau().getNgayDi();
            LocalTime gioKhoiHanh = ve.getLichTrinhTau().getGioDi();
            LocalDateTime ngayKhoiHanhDateTime = ngayKhoiHanh.atTime(gioKhoiHanh);
            LocalDateTime currentTime = LocalDateTime.now();
            long hoursBetween = ChronoUnit.HOURS.between(currentTime, ngayKhoiHanhDateTime);
            double phiTraVe = 0.0;
            double giaVe = ve.getGiaVe();
            if (hoursBetween < 4) {
                phiTraVe = 0.0;
            } else if (hoursBetween >= 4 && hoursBetween < 24) {
                phiTraVe = giaVe * 0.2;
            } else {
                phiTraVe = giaVe * 0.1;
            }
            
            // Thông tin vé
            String hoTen = ve.getTenKhachHang();
            String doiTuong = ve.getDoiTuong();
            String giayTo = ve.getGiayTo();
            String tenTau = ve.getLichTrinhTau().getTau().getTenTau();
            String ngayDi = ve.getNgayDi().toString();
            String gioDi = ve.getLichTrinhTau().getGioDi().toString();
            int toa = ve.getChoNgoi().getToaTau().getThuTu();
            String soCho = ve.getChoNgoi().getTenCho();
            String loaiGhe = ve.getChoNgoi().getLoaiCho().getTenLoai();
            String ma = ve.getMaVe();
            double thanhTien = dao.getThanhTienByMaVe(ma);
            String tenNguoiDat = kh.getTenKhachHang();
            String giaToNguoiDat = kh.getCCCD();
            String trangThai = ve.getTrangThai();
            boolean tinhTien=true;
             boolean cb=true;
             if(hoursBetween<4){
                 trangThai="Quá hạn đổi";
                 tinhTien=false;
                 cb=false;
             }else if(trangThai.equals("Đã Trả")){

                 tinhTien=false;
                 cb=false;
             }
            model.addRow(new Object[]{
                    model.getRowCount() + 1, // Số thứ tự
                    "Họ Tên KH: " + hoTen + "\n" + doiTuong + "\n" + "Giấy tờ: " + giayTo + "\n" + "Người đặt: " + tenNguoiDat + "\n" + "Giấy tờ Người Đặt: " + giaToNguoiDat,
                    tenTau + " " + ngayDi + " " + gioDi + "\n" + "Toa: " + toa + " Ghế: " + soCho + "\n" + loaiGhe + "\n" + veTau.getMaVe(),
                    thanhTien,
                    phiTraVe,
                    trangThai,
                    cb  // Nút "Xóa" vào cột cuối
                });
            tableHienThi.setModel(model);
   
        // Cấu hình chiều cao của hàng và cột để hiển thị nhiều dòng
        tableHienThi.getColumnModel().getColumn(1).setCellRenderer(new MultiLineCellRenderer());
        tableHienThi.getColumnModel().getColumn(2).setCellRenderer(new MultiLineCellRenderer());
        tableHienThi.getColumnModel().getColumn(6).setCellRenderer(new CustomRenderer());
        tableHienThi.getColumnModel().getColumn(6).setCellEditor(new CustomEditor());
             if(tinhTien) TinhToan(model.getRowCount()-1,true );
    }   
    }                                            

    private void txtSDTActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                      

    private void btnTimMaVeActionPerformed(ActionEvent evt) {
      
    // Giả sử bạn đã có maVe từ người dùng nhập vào:
    ConnectDatabase.getInstance().connect();
    String maVe = txtMaVe.getText().trim();
    DAO_TraVe dao = new DAO_TraVe();

    // Gọi phương thức để lấy dữ liệu từ cơ sở dữ liệu hoặc đối tượng
    VeTau ve = dao.getVeByMaVe(maVe);
    KhachHang kh = dao.getTenVaCCCDKhachHangByMaVe(maVe);

    // Đảm bảo bạn đã thiết lập TableModel cho JTable
    DefaultTableModel model = (DefaultTableModel) tableHienThi.getModel();
   
    // Kiểm tra nếu mã vé đã tồn tại trong bảng
    boolean isMaVeExist = false;
    boolean isNguoiDatExist = true;
    
    for (int i = 0; i < model.getRowCount(); i++) {
         String rowContent = (String) model.getValueAt(i, 2); // Lấy nội dung từ cột mã vé (cột thứ 3)
         String[] parts = rowContent.split("\n");
         String rowContent2 = (String) model.getValueAt(i, 1);
          String[] parts2 = rowContent2.split("\n");
        String existingMaVe = parts[parts.length - 1].trim();
        String existingNguoiDat = parts2[parts2.length - 1].trim(); // Giả sử mã hóa đơn nằm ở phần đầu dòng
        
        if (existingMaVe.equals(maVe)) {
            isMaVeExist = true;
            break;
        }else if(!existingNguoiDat.endsWith(kh.getCCCD())){
            isNguoiDatExist = false;
            break;
        }
    }
   
    // Nếu mã vé đã tồn tại, thông báo cho người dùng
    if (isMaVeExist) {
        JOptionPane.showMessageDialog(this, "Mã vé đã tồn tại trong bảng!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return; // Dừng việc thêm vé mới vào bảng
    }else if(!isNguoiDatExist){
        JOptionPane.showMessageDialog(this, "Vé trong 1 lần hủy phải cùng 1 người đặt", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return; // Dừng việc thêm vé mới vào bảng
    }

    // Nếu mã vé chưa tồn tại, tiếp tục thêm vé vào bảng
    LocalDate ngayKhoiHanh = ve.getLichTrinhTau().getNgayDi();
    LocalTime gioKhoiHanh = ve.getLichTrinhTau().getGioDi();
    LocalDateTime ngayKhoiHanhDateTime = ngayKhoiHanh.atTime(gioKhoiHanh);
    LocalDateTime currentTime = LocalDateTime.now();
    long hoursBetween = ChronoUnit.HOURS.between(currentTime, ngayKhoiHanhDateTime);
    double phiTraVe = 0.0;
    double giaVe = ve.getGiaVe();

    if (hoursBetween < 4) {
        phiTraVe = 0.0;
    } else if (hoursBetween >= 4 && hoursBetween < 24) {
        phiTraVe = giaVe * 0.2;
    } else {
        phiTraVe = giaVe * 0.1;
    }

    // Thông tin vé
    String hoTen = ve.getTenKhachHang();
    String doiTuong = ve.getDoiTuong();
    String giayTo = ve.getGiayTo();
    String tenTau = ve.getLichTrinhTau().getTau().getTenTau();
    String ngayDi = ve.getNgayDi().toString();
    String gioDi = ve.getLichTrinhTau().getGioDi().toString();
    int toa = ve.getChoNgoi().getToaTau().getThuTu();
    String soCho = ve.getChoNgoi().getTenCho();
    String loaiGhe = ve.getChoNgoi().getLoaiCho().getTenLoai();
    String ma = ve.getMaVe();
    double thanhTien = dao.getThanhTienByMaVe(ma);
    String tenNguoiDat = kh.getTenKhachHang();
    String giaToNguoiDat = kh.getCCCD();
    String trangThai = ve.getTrangThai();
    boolean tinhTien=true;
    boolean cb=true;
    if(hoursBetween<4){
        trangThai="Quá hạn đổi";
        tinhTien=false;
        cb=false;
    }else if(trangThai.equals("Đã Trả")){

            tinhTien=false;
            cb=false;
        }

    // Thêm dòng vào bảng
    model.addRow(new Object[]{
        model.getRowCount() + 1, // Số thứ tự
        "Họ Tên KH: " + hoTen + "\n" + doiTuong + "\n" + "Giấy tờ: " + giayTo + "\n" + "Người đặt: " + tenNguoiDat + "\n" + "Giấy tờ Người Đặt: " + giaToNguoiDat,
        tenTau + " " + ngayDi + " " + gioDi + "\n" + "Toa: " + toa + " Ghế: " + soCho + "\n" + loaiGhe + "\n" + maVe,
        thanhTien,
        phiTraVe,
        trangThai,
            cb  // Nút "Xóa" vào cột cuối
    });
    
    // Cập nhật lại bảng
    tableHienThi.setModel(model);
   
    // Cấu hình chiều cao của hàng và cột để hiển thị nhiều dòng
    tableHienThi.getColumnModel().getColumn(1).setCellRenderer(new MultiLineCellRenderer());
    tableHienThi.getColumnModel().getColumn(2).setCellRenderer(new MultiLineCellRenderer());
    tableHienThi.getColumnModel().getColumn(6).setCellRenderer(new CustomRenderer());
    tableHienThi.getColumnModel().getColumn(6).setCellEditor(new CustomEditor());
     if(tinhTien) TinhToan(model.getRowCount()-1,true );
    
    }                                          

    private void btnTraVeActionPerformed(ActionEvent evt) {
        // Lấy tổng số dòng trong bảng
DAO_TraVe dao = new DAO_TraVe();
DefaultTableModel model = (DefaultTableModel) tableHienThi.getModel();
int rowCount = model.getRowCount();

// Kiểm tra xem có vé nào được chọn không
boolean hasNewTicket = false;

for (int row = 0; row < rowCount; row++) {
    // Kiểm tra cột trạng thái của vé (cột cuối cùng)
    Boolean isSelected = (Boolean) model.getValueAt(row, 6); // Cột cuối cùng (trạng thái)
    if (isSelected != null && isSelected) {
        hasNewTicket = true; // Nếu có vé mới được chọn
        break; // Dừng vòng lặp vì đã tìm thấy vé mới
    }
}

// Kiểm tra nếu có vé mới, mở modal
if (hasNewTicket) {
    // Tạo danh sách các vé hợp lệ để trả
    DefaultTableModel model1 = (DefaultTableModel) tblXacNhan.getModel();
    model1.setRowCount(0);
    List<Object[]> veTauList = new ArrayList<>();

    for (int row = 0; row < rowCount; row++) {
        Boolean isSelected = (Boolean) model.getValueAt(row, 6);
        if (isSelected != null && isSelected) {
            // Lấy dữ liệu từ các cột khác
            String thongTinVe = (String) model.getValueAt(row, 2);

            // Trích xuất thông tin mã vé từ cột 2 (thông tin vé)
            String[] thongTinParts = thongTinVe.split("\n");
            String maVe = thongTinParts[thongTinParts.length - 1].trim(); // Mã vé là phần cuối cùng
            System.out.println(maVe);

            // Lấy thông tin vé từ DAO
            VeTau ve = dao.getVeByMaVe(maVe);
            String hoTen = ve.getTenKhachHang();
            String giayTo = ve.getGiayTo();
            String tenTau = ve.getLichTrinhTau().getTau().getTenTau();
            String soCho = ve.getChoNgoi().getTenCho();
            int toa = ve.getChoNgoi().getToaTau().getThuTu();
            double thanhTien = dao.getThanhTienByMaVe(maVe);
            Double phiTraVe = (Double) model.getValueAt(row, 4);
            String Tuyen =dao.getTenTuyenByMaVe(maVe);
            // Thêm dòng mới vào bảng xác nhận
            model1.addRow(new Object[]{
                "Tuyến:"+Tuyen+"\n"+"Họ Tên KH: " + hoTen + "\n" + "Tau: " + tenTau + " Toa: " + toa + " Số chỗ:" + soCho + "\n" + "Giấy tờ: " + giayTo,
                "Tiền Vé: " + thanhTien + "\n" + "Lệ Phí Trả Vé: " + phiTraVe + "\n" + "Tiền Trả: " + (thanhTien - phiTraVe)
            });
        }
        tblXacNhan.getColumnModel().getColumn(0).setCellRenderer(new MultiLineCellRenderer());
        tblXacNhan.getColumnModel().getColumn(1).setCellRenderer(new MultiLineCellRenderer());
    }

    // Cập nhật các giá trị tổng cộng
    lblTongPhi.setText(txtTienPhi.getText());
    lblTongVe1.setText(txtTongVe.getText());
    lblTongTien.setText(txtTienVe.getText());
    lblTongTra.setText(txtTienTra.getText());

    // Mở modal nếu có vé mới
    XacNhan.setModal(true); // Đảm bảo cửa sổ XacNhan là modal
    XacNhan.setVisible(true); // Hiển thị cửa sổ xác nhận
} else {
    // Nếu không có vé mới, có thể thông báo cho người dùng hoặc không làm gì cả
    JOptionPane.showMessageDialog(null, "Không có vé mới để xác nhận!");
}

    }                                        

    private void txtTongVeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                         

    private void txtTienTraActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                          

    private void btnResetActionPerformed(ActionEvent evt) {
        NhanVien nv = getNhanVien();
        System.out.println("Mã nhân viên: " + nv.getMaNhanVien());
         // Lấy DefaultTableModel của bảng
    DefaultTableModel model = (DefaultTableModel) tableHienThi.getModel();
    
    // Xóa tất cả các dòng trong bảng
    model.setRowCount(0);

    // (Nếu cần) Cập nhật lại bảng hoặc làm gì đó sau khi reset bảng
    // Ví dụ: Nếu bạn muốn cập nhật lại chiều cao hàng hoặc cài đặt lại một số thuộc tính, bạn có thể làm ở đây.
    tableHienThi.setModel(model);
        txtTongVe.setText("0");
         txtTienPhi.setText(String.valueOf(0));
         txtTienVe.setText(String.valueOf(0));
         txtTienTra.setText(String.valueOf(0));
    // Thông báo cho người dùng
   
    }                                        

    private void XacNhanComponentHidden(ComponentEvent evt) {
        // TODO add your handling code here:
    }                                       

    private void XacNhanComponentAdded(ContainerEvent evt) {
        // TODO add your handling code here:
    }                                      

    private void txtTienVeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                         

    private void jButton1ActionPerformed(ActionEvent evt) {
       XacNhan.setVisible(false);
    }                                        

    private void jButton3ActionPerformed(ActionEvent evt) {
        DAO_TraVe dao = new DAO_TraVe();

        DefaultTableModel model = (DefaultTableModel) tableHienThi.getModel();
        int rowCount = model.getRowCount();
        List<Object[]> veTauList = new ArrayList<>();
        String nhanVien = nhanvien.getMaNhanVien() ;
        String maHD = null;
        double[] tienGoc = new double[10];
        String[] tau = new String[10];
        for (int row = 0; row < rowCount; row++) {
            Boolean isSelected = (Boolean) model.getValueAt(row, 6);
            if (isSelected != null && isSelected) {
                // Lấy dữ liệu từ các cột khác
                String thongTinVe = (String) model.getValueAt(row, 2);

                // Trích xuất thông tin mã vé từ cột 2 (thông tin vé)
                String[] thongTinParts = thongTinVe.split("\n");
                String maVe = thongTinParts[thongTinParts.length - 1].trim(); // Mã vé là phần cuối cùng
                System.out.println(maVe);

                // Lấy thông tin vé từ DAO
                VeTau ve = dao.getVeByMaVe(maVe);
                KhachHang kh = dao.getTenVaCCCDKhachHangByMaVe(maVe);
                String hoTen = ve.getTenKhachHang();
                String giayTo = ve.getGiayTo();
                String tenTau = ve.getLichTrinhTau().getTau().getTenTau();
                String soCho = ve.getChoNgoi().getTenCho();
                int toa = ve.getChoNgoi().getToaTau().getThuTu();
                double thanhTien = dao.getThanhTienByMaVe(maVe);
                double phiTraVe = (double) model.getValueAt(row, 4);
                String Tuyen = dao.getTenTuyenByMaVe(maVe);
                String maNguoiDat=kh.getMaKhachHang();
                String tenNguoiDat = kh.getTenKhachHang();
                String giaToNguoiDat = kh.getCCCD();
                tienGoc[row]=thanhTien;
                tau[row] =tenTau;

                boolean isUpdated = dao.updateTrangThaiVe(maVe);
                if (isUpdated) {
                    System.out.println("Trạng thái vé đã được cập nhật thành 'Đã trả'.");

                    // Tính tổng tiền của tất cả vé trả
                    // Tạo hóa đơn mới và lấy mã hóa đơn

                    String tongTienTra = txtTienTra.getText();// Tổng tiền trả từ textbox
                    DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
                    tongTienTra = tongTienTra.replace(",", "");
                    Number number = null;
                    try {
                        number = decimalFormat.parse(tongTienTra);
                    } catch (ParseException e) {
                        throw new RuntimeException(e);
                    }
                    float tongTien = number.floatValue();
                    // Thêm hóa đơn trả vé vào cơ sở dữ liệu
                    System.out.println("Mã người đặt: "+maNguoiDat);
                    System.out.println("Mã nhân viên: "+nhanVien);
                    System.out.println("Tổng tiền: "+tongTien);
                   // Thêm hóa đơn

                    if (maHD != null) {
                        System.out.println("Hóa đơn trả vé đã được tạo: " + maHD);
                    }else {
                        System.out.println("có mã rồi không tạo nữa: " + maHD);
                        maHD = dao.addHoaDon(maNguoiDat, nhanVien, (0-tongTien),new Timestamp(System.currentTimeMillis()));
                    }
                    // Thêm chi tiết hóa đơn cho từng vé đã chọn
                    int addchitiet=dao.addChiTietHoaDon(maVe,maHD,1,0,(float) (0.0-(thanhTien)),"0");
                    System.out.println("Chi tiết hóa đơn đã được thêm: " + maVe+maHD+"thanh tien"+(thanhTien));

                } else {
                    System.out.println("Lỗi khi cập nhật trạng thái vé.");
                }
            }
                String TongtienTra=txtTienTra.getText();

        }
        if (jCheckBox1.isSelected()) {
            HoaDon hoaDon = new HoaDon();
            hoaDon = dao.getHoaDonByMa(maHD);
            hoaDon = dao.getHoaDonByMa(maHD);
            KhachHang khachHang = new KhachHang();
            khachHang = dao.getKhachHangByMaKH(hoaDon.getKhachHang().getMaKhachHang());
            List<VeTau> ve = new ArrayList<>();
            ve = dao.getVeTauByMaHD(maHD);
            List<ChiTietHoaDon> chiTietHoaDonList = new ArrayList<>();
            chiTietHoaDonList = dao.getChiTietHoaDonByMaHD(maHD);
            generateInvoicePdf(hoaDon, khachHang, chiTietHoaDonList, ve, nhanVien, tienGoc, tau);
            String fileName = "hoadonTra.pdf";
            try {
                // Tạo đối tượng File từ tên file
                File pdfFile = new File(fileName);
                if (pdfFile.exists()) {
                    // Sử dụng Desktop để mở file PDF
                    Desktop.getDesktop().open(pdfFile);
                } else {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy file PDF.");
                }
            } catch (IOException | java.io.IOException e1) {
                JOptionPane.showMessageDialog(null, "Không thể mở file PDF: " + e1.getMessage());
            }

        }
        btnReset.doClick();
        XacNhan.setVisible(false);
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TraVe_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TraVe_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TraVe_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TraVe_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TraVe_GUI(new NhanVien()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private JDialog XacNhan;
    private JButton btnReset;
    private JButton btnTimHoaDon;
    private JButton btnTimMaVe;
    private JButton btnTraVe;
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    private JCheckBox jCheckBox1;
    private JLabel jLabel1;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel jLabel2;
    private JLabel jLabel20;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JPanel jPanel1;
    private JPanel jPanel10;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanelChucNang;
    private JPanel jPanelTimKiem;
    private JPanel jPanelTimTheoHoaDon;
    private JPanel jPanelTraVe;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JLabel lblTongPhi;
    private JLabel lblTongTien;
    private JLabel lblTongTra;
    private JLabel lblTongVe1;
    private JLabel lblTraVe;
    private JTable tableHienThi;
    private JTable tblXacNhan;
    private JTextField txtCCCD;
    private JTextField txtMaHD;
    private JTextField txtMaVe;
    private JTextField txtSDT;
    private JTextField txtTienPhi;
    private JTextField txtTienTra;
    private JTextField txtTienVe;
    private JTextField txtTongVe;
    // End of variables declaration                   

    private static class MultiLineCellRenderer extends JTextArea implements TableCellRenderer {

        public MultiLineCellRenderer() {
            setLineWrap(true);
            setWrapStyleWord(true);
            setOpaque(true);
             setBorder(BorderFactory.createEmptyBorder());
        }
        @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
         setFont(new Font("Roboto", Font.PLAIN, 18)); 
         
        setText(value == null ? "" : value.toString());
        if (isSelected) {
            setBackground(table.getSelectionBackground());
            setForeground(table.getSelectionForeground());
        } else {
            setBackground(table.getBackground());
            setForeground(table.getForeground());
        }
        return this;
    }
    }
    
    
    
    class CustomRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        // Lấy giá trị trạng thái từ model
        String trangThai = table.getModel().getValueAt(row, 5).toString(); // Cột trạng thái
        if (trangThai.equals("Đã Trả")) {
            // Trả về một JLabel rỗng nếu trạng thái không phải "Đã thanh toán"
            return new JLabel("");
        }
        // Nếu trạng thái là "Đã thanh toán", hiển thị checkbox
        JCheckBox checkBox = new JCheckBox();
        checkBox.setSelected(value != null && (boolean) value);
        return checkBox;
    }
}

// Sử dụng editor để ngăn chỉnh sửa checkbox nếu trạng thái không phù hợp
class CustomEditor extends DefaultCellEditor {
     private boolean lastState = false;
    public CustomEditor() {
        super(new JCheckBox());
        
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        // Lấy giá trị trạng thái từ cột (giả sử cột trạng thái là cột thứ 6)
        String trangThai = table.getModel().getValueAt(row, 5).toString(); // Cột trạng thái (index 5)
        String rowContent = table.getModel().getValueAt(row, 2).toString();
        
          // Lấy nội dung từ cột mã vé (cột thứ 3)
     
            JCheckBox checkBox = (JCheckBox) super.getTableCellEditorComponent(table, value, isSelected, row, column);
        if (trangThai.equals("Đã Trả")) {
            checkBox.setEnabled(false); // Vô hiệu hóa checkbox
        } else {
            checkBox.setEnabled(true); // Cho phép chỉnh sửa checkbox nếu trạng thái là "Đã thanh toán"
        }

        if (checkBox.getItemListeners().length == 0) {
        // Đăng ký ItemListener chỉ một lần
        checkBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                // Kiểm tra xem trạng thái checkbox có thay đổi hay không
                boolean currentState = checkBox.isSelected(); // Lấy trạng thái hiện tại của checkbox

                if (currentState != lastState) { // Chỉ xử lý khi trạng thái thay đổi
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        // Xử lý khi checkbox được chọn
                    } else {
                        // Xử lý khi checkbox không được chọn
                    }
                    lastState = currentState; // Cập nhật trạng thái cuối cùng
                }
               
                TinhToan(row, lastState);
            }
        });
    }

    return checkBox;
    }
    
    }
    public void TinhToan(int row,boolean check){
      try {
    // Lấy giá trị từ JTextField
    String txtTongVeValue = txtTongVe.getText();  // Ví dụ: "10"
    String txtTienPhiValue = txtTienPhi.getText(); // Ví dụ: "50.000"
    String txtTienVeValue = txtTienVe.getText();   // Ví dụ: "200.000"
    String txtTienTraValue = txtTienTra.getText(); // Ví dụ: "150.000"

    // Tạo DecimalFormat để định dạng tiền tệ
    DecimalFormat decimalFormat = new DecimalFormat("#,###.##");
    decimalFormat.setParseBigDecimal(true);  // Cho phép phân tích giá trị tiền tệ lớn

    // Làm sạch các ký tự không hợp lệ (dấu phẩy, dấu cách, dấu ₫)
    txtTienPhiValue = txtTienPhiValue.replaceAll("[^\\d.,]", "");
    txtTienVeValue = txtTienVeValue.replaceAll("[^\\d.,]", "");
    txtTienTraValue = txtTienTraValue.replaceAll("[^\\d.,]", "");

    // Kiểm tra nếu giá trị là "0" hoặc rỗng
    if (txtTienPhiValue.equals("0") || txtTienPhiValue.isEmpty()) {
        txtTienPhiValue = "0"; // Gán giá trị mặc định nếu không có giá trị
    }
    if (txtTienVeValue.equals("0") || txtTienVeValue.isEmpty()) {
        txtTienVeValue = "0"; // Gán giá trị mặc định nếu không có giá trị
    }
    if (txtTienTraValue.equals("0") || txtTienTraValue.isEmpty()) {
        txtTienTraValue = "0"; // Gán giá trị mặc định nếu không có giá trị
    }

    // Chuyển đổi giá trị từ JTextField sang các kiểu số
    int tongVe = Integer.parseInt(txtTongVeValue);  // Không cần xử lý tiền tệ vì số lượng là nguyên
    double tongPhi = decimalFormat.parse(txtTienPhiValue).doubleValue();  // Xử lý tiền tệ
    double tongTienVe = decimalFormat.parse(txtTienVeValue).doubleValue(); // Xử lý tiền tệ
    double tongTra = decimalFormat.parse(txtTienTraValue).doubleValue(); // Xử lý tiền tệ

    // Kiểm tra điều kiện và cập nhật giá trị
    if (check == true) {
        tongVe++;
        String phi = tableHienThi.getModel().getValueAt(row, 4).toString();
        String tienVe = tableHienThi.getModel().getValueAt(row, 3).toString();
        tongPhi += Double.parseDouble(phi);
        tongTienVe += Double.parseDouble(tienVe);
    } else {
        tongVe--;
        String phi = tableHienThi.getModel().getValueAt(row, 4).toString();
        String tienVe = tableHienThi.getModel().getValueAt(row, 3).toString();
        tongPhi -= Double.parseDouble(phi);
        tongTienVe -= Double.parseDouble(tienVe);
    }

    // Định dạng và hiển thị lại các giá trị vào JTextField
    txtTongVe.setText(String.valueOf(tongVe)); // Nếu `tongVe` là số lượng, không cần định dạng tiền tệ

    // Định dạng tiền phí và tiền vé
    txtTienPhi.setText(decimalFormat.format(tongPhi)); // Định dạng tiền phí
    txtTienVe.setText(decimalFormat.format(tongTienVe)); // Định dạng tiền vé

    // Tính tiền trả và định dạng
    double tienTra = tongTienVe - tongPhi;
    txtTienTra.setText(decimalFormat.format(tienTra)); // Hiển thị tiền trả đã định dạng

    } catch (ParseException e) {
    e.printStackTrace(); // Nếu có lỗi khi phân tích giá trị tiền tệ
    } catch (NumberFormatException e) {
    e.printStackTrace(); // Nếu có lỗi khi chuyển đổi kiểu dữ liệu số
    }



    }
    public Component getTrave() {

        return traVePanel;
    }
}

